%Mohiuddin:JCP's binary model with two cutoff distances.

% x_t is a fair coin toss
% y_(t+1) is x_t  for d<=R and  
%y_(t+1) is a fair coin toss for d>R. 

TMAX=100;
num_trails=10;
R=1;                % For different values of R=1,2,3,...
tau=1;
symbols=[0 1];

lambda1=linspace(0,2*R,10);
lambda2=linspace(0,2*R,10);
TE_x_y=zeros(length(lambda1),length(lambda2),length(num_trails));

for l_ind1=1:length(lambda1)
    cutoff1=lambda1(l_ind1); 
    for l_ind2=1:length(lambda2)
        cutoff2=lambda2(l_ind2);
        tic;
        parfor trail_ind=1:num_trails
            if cutoff1<=cutoff2
                TE_x_y(l_ind1,l_ind2,trail_ind)=0;
                else
                [x_t,y_t,d]=binary_model3_function(TMAX,R);
                X=x_t(1:end-tau);
                Y=y_t(1:end-tau);
                Y_t_1=y_t(tau+1:end);
                v_yyx=[Y_t_1' Y' X'];
                delete_ind=find(d<cutoff2 | d>cutoff1); 
                data=v_yyx;                            
                if (max(delete_ind)>length(data))
                    delete_ind(delete_ind>length(data))=[];
                end
                data(delete_ind,:)=[];
                data1=data;   
                TE_x_y(l_ind1,l_ind2,trail_ind)= transfer_ent_function(data1,symbols);
            end
        end
        toc
    end
end
[gx,gy]=gradient(mean(TE_x_y,3));
[gx1,gy1]=gradient(mean(TE_x_y,3),2);
magnitude=sqrt(gx.^2+gy.^2);
magnitude1=sqrt(gx1.^2+gy1.^2);

% % disp(TE_x_y)
%%%Figure using heatmap
%% Transfer entropy
figure
heatmap(lambda2, lambda1,mean(TE_x_y,3),'GridVisible','off','Colormap',jet)
title(['Transfer entropy(TE_x_y)',' , ','R=',num2str(R),' , ','\lambda_2 \leq d \leq \lambda_1'])
xlabel('Cutoff distance \lambda_2')
ylabel('Cutoff distance \lambda_1')
 

% %% 1st derivative
% figure
% heatmap(lambda2, lambda1,magnitude,'GridVisible','off','Colormap',jet)
% title(['Magnitude of gradient(TE_x_y)',' , ','R=',num2str(R),' , ','\lambda_2 \leq d \leq \lambda_1'])
% xlabel('Cutoff distance \lambda_2')
% ylabel('Cutoff distance \lambda_1')
% xlim([0 2*R])
% ylim([0 2*R])
% 
% %% 2nd Derivative of TE
% 
% figure
% heatmap(lambda2, lambda1,magnitude1,'GridVisible','off','Colormap',jet)
% title(['Magnitude of two times gradient(TE_x_y)',' , ','R=',num2str(R),' , ','\lambda_2 \leq d \leq \lambda_1'])
% xlabel('Cutoff distance \lambda_2')
% ylabel('Cutoff distance \lambda_1')
% xlim([0 2*R])
% ylim([0 2*R])



%%%Figures using surface

%%% Transfer entropy

figure
surf(lambda2, lambda1,mean(TE_x_y,3),'Edgecolor','none')
xlabel('Cutoff distance \lambda_1')
ylabel('Cutoff distance \lambda_2')
zlabel('TE_x_y')
xlim([0 2*R])
ylim([0 2*R])
title(['Transfer entropy(TE_x_y)',' , ','R=',num2str(R),' , ','\lambda_2 \leq d \leq \lambda_1'])
view(2)
colorbar
colormap(jet)
grid off
%%legend('\lambda_1 \leq d \leq \lambda_2','location','best');

%% 1st derivative
% figure
% surf(lambda2, lambda1,magnitude,'Edgecolor','none')
% xlabel('Cutoff distance \lambda_2')
% ylabel('Cutoff distance \lambda_1')
% zlabel('|grad(TE_x_y)|')
% xlim([0 2*R])
% ylim([0 2*R])
% title(['Magnitude of gradient(TE_x_y)',' , ','R=',num2str(R),' , ','\lambda_2 \leq d \leq \lambda_1'])
% view(2)
% colorbar
% grid off
%%legend('\lambda_1 \leq d \leq \lambda_2','location','best');


% %% 2nd Derivative of TE

% figure
% surf(lambda2, lambda1,magnitude1,'Edgecolor','none')
% xlabel('Cutoff distance \lambda_2')
% ylabel('Cutoff distance \lambda_1')
% zlabel('|Grad^2(TE_x_y)|')
% xlim([0 2*R])
% ylim([0 2*R])
% title(['Magnitude of two times gradient(TE_x_y)',' , ','R=',num2str(R),' , ','\lambda_2 \leq d \leq \lambda_1'])
% view(2)
% colorbar
% grid off
% %%legend('\lambda_1 \leq d \leq \lambda_2','location','best');

